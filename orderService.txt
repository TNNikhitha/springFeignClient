order controller

package com.ust.orderService.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ust.orderService.model.Order;
import com.ust.orderService.service.OrderService;

@RestController
@RequestMapping("/orderService")
public class OrderController {
	
	@Autowired
	private OrderService orderService;
	
	 @PostMapping("/placeOrder/{productId}/{quant}")
	    public Order placeOrder(@PathVariable("productId") Long productId, @PathVariable("quant") Double quant) {
	        return orderService.placeOrder(productId, quant);
	    }

	    @GetMapping("/getOrder/{id}")
	    public Order getOrder(@PathVariable Long id) {
	        return orderService.getOrderById(id);
	    }
	
	

}

productServiceClient

package com.ust.orderService.controller;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.ust.orderService.model.Product;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@FeignClient(name="productService")
public interface ProductServiceClient {
	
	@GetMapping("/product/{productId}")
	@CircuitBreaker(name="productService",fallbackMethod="fallbackHello")
	Product getProductById(@PathVariable("productId") Long productId);
	
	default String fallbackHello(Throwable t) {
		return "Product Service is Down!";
	}
	

}

Order

package com.ust.orderService.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="orders")
public class Order {

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long orderId;
	
	private Long productId;
	private Double quant;
	public Long getOrderId() {
		return orderId;
	}
	public void setOrderId(Long orderId) {
		this.orderId = orderId;
	}
	public Long getProductId() {
		return productId;
	}
	public void setProductId(Long productId) {
		this.productId = productId;
	}
	public Double getQuant() {
		return quant;
	}
	public void setQuant(Double quant) {
		this.quant = quant;
	}
	public Order(Long orderId, Long productId, Double quant) {
		super();
		this.orderId = orderId;
		this.productId = productId;
		this.quant = quant;
	}
	public Order() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
	
}

product

package com.ust.orderService.model;

public class Product {
	
	private Long productId;
	private String productName;
	private Double price;
	private Double quantity;
	public Long getProductId() {
		return productId;
	}
	public void setProductId(Long productId) {
		this.productId = productId;
	}
	public String getProductName() {
		return productName;
	}
	public void setProductName(String productName) {
		this.productName = productName;
	}
	public Double getPrice() {
		return price;
	}
	public void setPrice(Double price) {
		this.price = price;
	}
	public Double getQuantity() {
		return quantity;
	}
	public void setQuantity(Double quantity) {
		this.quantity = quantity;
	}
	public Product(Long productId, String productName, Double price, Double quantity) {
		super();
		this.productId = productId;
		this.productName = productName;
		this.price = price;
		this.quantity = quantity;
	}
	public Product() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	

}

order repo

package com.ust.orderService.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ust.orderService.model.Order;

@Repository
public interface OrderRepo extends JpaRepository<Order, Long>{

}

order service

package com.ust.orderService.service;

import com.ust.orderService.model.Order;


public interface OrderService {

	public Order placeOrder(Long productId, Double quant);
	public Order getOrderById(Long orderId);
}

order service impl

package com.ust.orderService.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ust.orderService.controller.ProductServiceClient;
import com.ust.orderService.model.Order;
import com.ust.orderService.model.Product;
import com.ust.orderService.repository.OrderRepo;


@Service
public class OrderServiceImpl implements OrderService{
	
	@Autowired
	private OrderRepo orderRepo;
	
	@Autowired
	private ProductServiceClient productServiceClient;

	@Override
	public Order placeOrder(Long productId, Double quant) {
		// TODO Auto-generated method stub
		Product product = productServiceClient.getProductById(productId);

        if (product.getQuantity() < quant) {
            throw new RuntimeException("Not enough stock available!");
        }
        

        // Place order
        Order order = new Order();
        order.setProductId(productId);
        order.setQuant(quant);

        return orderRepo.save(order);
	}

	@Override
	public Order getOrderById(Long orderId) {
		// TODO Auto-generated method stub
		Optional<Order> opt = orderRepo.findById(orderId);
		return opt.get();
	}

}


Application property

spring.application.name=orderService

server.port=9081
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
spring.cloud.compatibility-verifier.enabled=false
spring.datasource.url=jdbc:mysql://localhost:3306/productdb
spring.datasource.username=root
spring.datasource.password=pass@word1
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update